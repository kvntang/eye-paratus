import cv2
import mediapipe as mp
from mediapipe.tasks import python
from mediapipe.tasks.python import vision
import numpy as np

MARGIN = 10  # pixels
ROW_SIZE = 10  # pixels
FONT_SIZE = 1
FONT_THICKNESS = 1
TEXT_COLOR = (255, 0, 0)  # red


def visualize(
    image,
    detection_result
) -> np.ndarray:
  """Draws bounding boxes on the input image and return it.
  Args:
    image: The input RGB image.
    detection_result: The list of all "Detection" entities to be visualize.
  Returns:
    Image with bounding boxes.
  """
  for detection in detection_result.detections:
    # Draw bounding_box
    bbox = detection.bounding_box
    start_point = bbox.origin_x, bbox.origin_y
    end_point = bbox.origin_x + bbox.width, bbox.origin_y + bbox.height
    cv2.rectangle(image, start_point, end_point, TEXT_COLOR, 3)

    # Draw label and score
    category = detection.categories[0]
    category_name = category.category_name
    probability = round(category.score, 2)
    result_text = category_name + ' (' + str(probability) + ')'
    text_location = (MARGIN + bbox.origin_x,
                     MARGIN + ROW_SIZE + bbox.origin_y)
    cv2.putText(image, result_text, text_location, cv2.FONT_HERSHEY_PLAIN,
                FONT_SIZE, TEXT_COLOR, FONT_THICKNESS)

  return image


model_path = 'C:/Users/Kevin/Documents/GitHub/machine-gaze/efficientdet_lite0.tflite'


# Initialize MediaPipe components
BaseOptions = mp.tasks.BaseOptions
ObjectDetector = mp.tasks.vision.ObjectDetector
ObjectDetectorOptions = mp.tasks.vision.ObjectDetectorOptions
VisionRunningMode = mp.tasks.vision.RunningMode

# Specify the model path and options for the object detector
options = ObjectDetectorOptions(
    base_options=BaseOptions(model_asset_path=model_path),
    max_results=5,
    running_mode=VisionRunningMode.VIDEO)

detector = ObjectDetector.create_from_options(options)

# Start capturing video from the webcam
cap = cv2.VideoCapture(0)
video_file_fps = cap.get(cv2.CAP_PROP_FPS)

frame_index = 0
while cap.isOpened():
    success, opencv_frame = cap.read()
    if not success:
        print("Ignoring empty camera frame.")
        continue
    
    
    # STEP 3: Load the input image.
    # image = mp.Image.create_from_file(opencv_frame)
    # #OpenCV to MP
    rgb_frame = cv2.cvtColor(opencv_frame, cv2.COLOR_BGR2RGB) #BGR to RGB
    resized_frame = cv2.resize(opencv_frame, (320, 320))
    mp_image = mp.Image(image_format=mp.ImageFormat.SRGB, data=resized_frame)

    # STEP 4: Detect objects in the input image.
        # Calculate the timestamp of the current frame
    frame_timestamp_ms = int(1000 * frame_index / video_file_fps)
    detection_result = detector.detect_for_video(mp_image, frame_timestamp_ms)



    # STEP 5: Process the detection result. In this case, visualize it.
    image_copy = np.copy(mp_image.numpy_view())
    annotated_image = visualize(image_copy, detection_result)
    rgb_annotated_image = cv2.cvtColor(annotated_image, cv2.COLOR_BGR2RGB)
    cv2.imshow('kevin', rgb_annotated_image)


    # # Display the original image
    # cv2.imshow('MediaPipe Object Detection', opencv_frame)
    if cv2.waitKey(5) & 0xFF == 27:  # Press 'ESC' to exit
        break

    frame_index += 1



    #DRAWING

    # # Draw the detection results onto the original image (not resized)
    # opencv_frame = cv2.cvtColor(opencv_frame, cv2.COLOR_RGB2BGR)
    # if detection_result.detections:
    #     for detection in detection_result.detections:
    #         mp.tasks.vision.draw_detection(opencv_frame, detection)



# Release resources
cap.release()
cv2.destroyAllWindows()
