import cv2
import mediapipe as mp
mp_drawing = mp.solutions.drawing_utils
mp_drawing_styles = mp.solutions.drawing_styles
mp_hands = mp.solutions.hands

# For webcam input:
cap = cv2.VideoCapture(0)
with mp_hands.Hands(
    model_complexity=0,
    min_detection_confidence=0.5,
    min_tracking_confidence=0.5) as hands:
  while cap.isOpened():
    success, image = cap.read()
    if not success:
      print("Ignoring empty camera frame.")
      # If loading a video, use 'break' instead of 'continue'.
      continue

    # To improve performance, optionally mark the image as not writeable to
    # pass by reference.
    image.flags.writeable = False
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = hands.process(image)

    # Draw the hand annotations on the image.
    image.flags.writeable = True
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    # Draw just the thumb and print position
    lmList = []
    if results.multi_hand_landmarks:
      myhand = results.multi_hand_landmarks[0]
      for id, lm in enumerate(myhand.landmark):
        h, w, c = image.shape
        cx, cy = int(lm.x * w), int(lm.y*h)
        lmList.append([id, cx, cy])
    if len(lmList) != 0:
        pos = lmList[8] #show only one landmark
        cv2.circle(image, (pos[1], pos[2]), 15, (0, 255, 0), cv2.FILLED)
        text = f'{str(pos[1])}, {str(pos[2])} '
        cv2.putText(image, text, (10, 70), cv2.FONT_HERSHEY_PLAIN, 3, (0, 255, 0), 3)
        # draw line between point and center of screen
        cv2.line(image, (pos[1], pos[2]), (300, 225), (0, 255, 0), thickness=2, lineType=8)
      
      
    #   #draw all landmarks
    #   for hand_landmarks in results.multi_hand_landmarks:
    #     mp_drawing.draw_landmarks(
    #         image,
    #         hand_landmarks,
    #         mp_hands.HAND_CONNECTIONS,
    #         mp_drawing_styles.get_default_hand_landmarks_style(),
    #         mp_drawing_styles.get_default_hand_connections_style())
        
    # Flip the image horizontally for a selfie-view display.
    # cv2.imshow('MediaPipe Hands', cv2.flip(image, 1))
    cv2.imshow("Image", image)
    if cv2.waitKey(5) & 0xFF == 27:
      break
cap.release()